# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  generate_ios_project:
    macos:
      xcode: 12.5.1
    
    steps:
      - checkout
      - run:
          name: Generate iOS project
          command: |
            xcodebuild -project "$CIRCLE_PROJECT_REPONAME.xcodeproj" -scheme "$CIRCLE_PROJECT_REPONAME" -configuration Debug -sdk iphonesimulator -derivedDataPath "$CIRCLE_TEST_REPORTS" -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest' build
      - run:
          name: Detect OS
          command: 
            readonly platform="$(uname -s | tr '[:upper:]' '[:lower:]')"

            case "$platform" in
              linux*)
                printf '%s\n' "Detected OS: Linux."
                printf '%s\n' "export PLATFORM=linux" >> "$BASH_ENV"
                ;;
              darwin*)
                printf '%s\n' "Detected OS: macOS."
                printf '%s\n' "export PLATFORM=macos" >> "$BASH_ENV"
                ;;
              msys*|cygwin*)
                printf '%s\n' "Detected OS: Windows."
                printf '%s\n' "export PLATFORM=windows" >> "$BASH_ENV"
                ;;
              *)
                echo "Unsupported OS: \"$platform\"."
                exit 1
                ;;
            esac
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: 12.5.1 # Specify the Xcode version to use

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run: sudo gem install fastlane # install fastlane gem
      - run: fastlane init # Install CocoaPods dependencies
      - run: fastlane scan # Run tests using Fastlane
      - run:
          name: running fastlane beta
          command: fastlane ios beta # Run beta build

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
